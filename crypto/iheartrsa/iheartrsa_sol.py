import ast
import decimal
import sys
from decimal import Decimal

import select
from Crypto.Util import number
from Crypto.Util.number import bytes_to_long, long_to_bytes
import hashlib
import random

with open('flag.txt') as f:
    flag = f.readline()

print(str(hashlib.sha256(flag.encode('utf-8')).hexdigest()))
raw_bin = str(bin(int('0x'+str(hashlib.sha256(flag.encode('utf-8')).hexdigest()),16))[2:])
hsh = int('0b1' + '0' * (256 - len(raw_bin)) + raw_bin, 2)

p = number.getPrime(1024)
q = number.getPrime(1024)
n = p * q
e = 0

for i in range(0, 100):
    if pow(hsh, i) >= n:
        e = i; break

m=17363792807222685318684547891463188987129385329345756306444540576874885528941564576542660395226422194575650347910700872324436969406516856969982284315374545845079057021803154207956317827381634843264327190808113157174942359125689247225949747642326718176962522486315657553213758034324473059508332967268821941961348452168581687141513489039608045154917794028038222569644975702834913336571755781458546687948253800243258203806984392459892983084091917368211704217241052738523120914233310816595016733019803618118645822501146341278019306220126226643004983376169787052256710051180766243820832454735999215724179695287864115149901

n=23876194059714490078425842786543033501206232982016010094383183352050315709142810643236709726878508874560799290146395538008357684299520606553017378197514208549271572645566236173915807442881173981804648288679146201625075580479051230360530588730856604679913300220047613426884469956125282543092851342192480907783657253238973200476546610140385388930987587568734556061809250006175600978028385470069161129433280719796333004670325532362545612412617121532306095977142458571118931966195171371803773285524556296557355937305015559127763117022433532108163075033996542819796858846360356987364675107475199073340234861967633595849303
print(f'm: {m}')
print(f'n: {n}')

#solution starts

e = 8
# 1 <= hsh^e / n < 2^8 = 256
base = 0

decimal.getcontext().prec = 10000

def nthRoot(x, exp):
    x = Decimal(x)
    lo, hi = 1, x
    while lo < hi:
        mid = (lo + hi) // 2
        if mid ** exp < x:
            lo = mid + 1
        else:
            hi = mid
    return int(lo)

for b in range(1, 256):
    print(b)
    try_m = b * n + m
    if nthRoot(try_m, e) ** e != try_m:
        continue
    else:
        print(nthRoot(try_m, e))
        print(hsh)
